version: '3.4'

services:
  superset:
    # image: epigraphhub/superset
    hostname: superset
    restart: unless-stopped
    env_file:
      - ../.env
    build:
      context: ..
      dockerfile: containers/superset/Dockerfile
      args:
        # note: if you want to use a specific UID and GID, ensure to add it to
        #       the .env file
        - UID=${HOST_UID:-1000}
        - GID=${HOST_GID:-1000}
    user: "epigraphhub:epigraphhub"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 40s  # requires docker-compose 3.4
    volumes:
      - ..:/opt/EpiGraphHub
      - ${SUPERSET_DB_PATH_DIR_HOST}:/opt/data/superset/
    ports:
      - ${SUPERSET_PORT}:8088
    depends_on:
      - redis
      - flower

  airflow:
    hostname: airflow
    restart: unless-stopped
    env_file:
      - ../.env
    build:
      context: ..
      dockerfile: containers/airflow/Dockerfile
      args:
        # note: if you want to use a specific UID and GID, ensure to add it to
        #       the .env file
        - UID=${HOST_UID:-1000}
        - GID=${HOST_GID:-1000}
    environment:
      AIRFLOW_UID: "${HOST_UID:-1000}"
    user: "epigraphhub:epigraphhub"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 40s  # requires docker-compose 3.4
    volumes:
      - ..:/opt/EpiGraphHub
      - ${SUPERSET_DB_PATH_DIR_HOST}:/opt/data/superset/
      - ${AIRFLOW_FILES_PATH_DIR_HOST}/logs:/opt/airflow/logs
      - ${AIRFLOW_FILES_PATH_DIR_HOST}/plugins:/opt/airflow/plugins
      - ./airflow/dags:/opt/airflow/dags
      - ~/.config:/home/epigraphhub/.config
    ports:
      - ${AIRFLOW_PORT}:8080
    depends_on:
      - redis
      - flower
      - minio

  redis:
    image: redis:alpine
    hostname: redis
    restart: unless-stopped
    # environment:
    #   DISABLE_COMMANDS: "FLUSHDB,FLUSHALL,CONFIG"
    #   ALLOW_EMPTY_PASSWORD: "no"
    #   REDIS_PASSWORD: "${REDIS_PASSWORD}"
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 30s  # requires docker-compose 3.4
    volumes:
      - redis:/data

  postgres:
    hostname: postgres
    restart: unless-stopped
    build:
      context: ..
      dockerfile: containers/postgresql/Dockerfile
    env_file:
      - ../.env
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${POSTGRES_PORT} -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    command: -p ${POSTGRES_PORT}

  flower:
    image: mher/flower:0.9.7
    restart: unless-stopped
    env_file:
      - ../.env
    depends_on:
      - redis
    command: [
      "flower",
      "--broker=redis://redis:6379/0",
      "--port=8888",
      "--basic_auth=admin:${FLOWER_PASSWORD}"
    ]
    ports:
      - ${FLOWER_PORT}:8888
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--spider", "http://localhost:8888/healthcheck"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 40s  # requires docker-compose 3.4

  minio:
    image: quay.io/minio/minio
    restart: unless-stopped
    env_file:
      - ../.env
    command: [
      "server",
      "/data",
      "--console-address",
      ":9090"
    ]
    ports:
      - ${MINIO_PORT_1}:9000
      - ${MINIO_PORT_2}:9090
    volumes:
      - minio:/data
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--spider", "http://localhost:9000"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 40s  # requires docker-compose 3.4


volumes:
  redis:
  minio:
